!function(t){var i={};function n(o){if(i[o])return i[o].exports;var e=i[o]={i:o,l:!1,exports:{}};return t[o].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=t,n.c=i,n.d=function(t,i,o){n.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var e in t)n.d(o,e,function(i){return t[i]}.bind(null,e));return o},n.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(i,"a",i),i},n.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},n.p="",n(n.s=2)}([function(t,i,n){"use strict";var o,e=this&&this.__extends||(o=function(t,i){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,i){t.__proto__=i}||function(t,i){for(var n in i)i.hasOwnProperty(n)&&(t[n]=i[n])})(t,i)},function(t,i){function n(){this.constructor=t}o(t,i),t.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)});Object.defineProperty(i,"__esModule",{value:!0});var r=n(3),s={};function u(){}function h(t){for(var i=t.length,n=Array(i),o=0;o<i;++o)n[o]=t[o];return n}function p(t,i,n){try{return t.f(i)}catch(t){return n._e(t),s}}i.NO=s;var c={_n:u,_e:u,_c:u};function f(t){t._start=function(t){t.next=t._n,t.error=t._e,t.complete=t._c,this.start(t)},t._stop=t.stop}i.NO_IL=c;var _=function(){function t(t,i){this._stream=t,this._listener=i}return t.prototype.unsubscribe=function(){this._stream._remove(this._listener)},t}(),a=function(){function t(t){this._listener=t}return t.prototype.next=function(t){this._listener._n(t)},t.prototype.error=function(t){this._listener._e(t)},t.prototype.complete=function(){this._listener._c()},t}(),y=function(){function t(t){this.type="fromObservable",this.ins=t,this.active=!1}return t.prototype._start=function(t){this.out=t,this.active=!0,this._sub=this.ins.subscribe(new a(t)),this.active||this._sub.unsubscribe()},t.prototype._stop=function(){this._sub&&this._sub.unsubscribe(),this.active=!1},t}(),l=function(){function t(t){this.type="merge",this.insArr=t,this.out=s,this.ac=0}return t.prototype._start=function(t){this.out=t;var i=this.insArr,n=i.length;this.ac=n;for(var o=0;o<n;o++)i[o]._add(this)},t.prototype._stop=function(){for(var t=this.insArr,i=t.length,n=0;n<i;n++)t[n]._remove(this);this.out=s},t.prototype._n=function(t){var i=this.out;i!==s&&i._n(t)},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){if(--this.ac<=0){var t=this.out;if(t===s)return;t._c()}},t}(),v=function(){function t(t,i,n){this.i=t,this.out=i,this.p=n,n.ils.push(this)}return t.prototype._n=function(t){var i=this.p,n=this.out;if(n!==s&&i.up(t,this.i)){for(var o=i.vals,e=o.length,r=Array(e),u=0;u<e;++u)r[u]=o[u];n._n(r)}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.p;t.out!==s&&0==--t.Nc&&t.out._c()},t}(),d=function(){function t(t){this.type="combine",this.insArr=t,this.out=s,this.ils=[],this.Nc=this.Nn=0,this.vals=[]}return t.prototype.up=function(t,i){var n=this.vals[i],o=this.Nn?n===s?--this.Nn:this.Nn:0;return this.vals[i]=t,0===o},t.prototype._start=function(t){this.out=t;var i=this.insArr,n=this.Nc=this.Nn=i.length,o=this.vals=new Array(n);if(0===n)t._n([]),t._c();else for(var e=0;e<n;e++)o[e]=s,i[e]._add(new v(e,t,this))},t.prototype._stop=function(){for(var t=this.insArr,i=t.length,n=this.ils,o=0;o<i;o++)t[o]._remove(n[o]);this.out=s,this.ils=[],this.vals=[]},t}(),m=function(){function t(t){this.type="fromArray",this.a=t}return t.prototype._start=function(t){for(var i=this.a,n=0,o=i.length;n<o;n++)t._n(i[n]);t._c()},t.prototype._stop=function(){},t}(),w=function(){function t(t){this.type="fromPromise",this.on=!1,this.p=t}return t.prototype._start=function(t){var i=this;this.on=!0,this.p.then((function(n){i.on&&(t._n(n),t._c())}),(function(i){t._e(i)})).then(u,(function(t){setTimeout((function(){throw t}))}))},t.prototype._stop=function(){this.on=!1},t}(),b=function(){function t(t){this.type="periodic",this.period=t,this.intervalID=-1,this.i=0}return t.prototype._start=function(t){var i=this;this.intervalID=setInterval((function(){t._n(i.i++)}),this.period)},t.prototype._stop=function(){-1!==this.intervalID&&clearInterval(this.intervalID),this.intervalID=-1,this.i=0},t}(),g=function(){function t(t,i){this.type="debug",this.ins=t,this.out=s,this.s=u,this.l="","string"==typeof i?this.l=i:"function"==typeof i&&(this.s=i)}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s},t.prototype._n=function(t){var i=this.out;if(i!==s){var n=this.s,o=this.l;if(n!==u)try{n(t)}catch(t){i._e(t)}else o?console.log(o+":",t):console.log(t);i._n(t)}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),x=function(){function t(t,i){this.type="drop",this.ins=i,this.out=s,this.max=t,this.dropped=0}return t.prototype._start=function(t){this.out=t,this.dropped=0,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s},t.prototype._n=function(t){var i=this.out;i!==s&&this.dropped++>=this.max&&i._n(t)},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),O=function(){function t(t,i){this.out=t,this.op=i}return t.prototype._n=function(){this.op.end()},t.prototype._e=function(t){this.out._e(t)},t.prototype._c=function(){this.op.end()},t}(),N=function(){function t(t,i){this.type="endWhen",this.ins=i,this.out=s,this.o=t,this.oil=c}return t.prototype._start=function(t){this.out=t,this.o._add(this.oil=new O(t,this)),this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.o._remove(this.oil),this.out=s,this.oil=c},t.prototype.end=function(){var t=this.out;t!==s&&t._c()},t.prototype._n=function(t){var i=this.out;i!==s&&i._n(t)},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){this.end()},t}(),A=function(){function t(t,i){this.type="filter",this.ins=i,this.out=s,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s},t.prototype._n=function(t){var i=this.out;if(i!==s){var n=p(this,t,i);n!==s&&n&&i._n(t)}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),I=function(){function t(t,i){this.out=t,this.op=i}return t.prototype._n=function(t){this.out._n(t)},t.prototype._e=function(t){this.out._e(t)},t.prototype._c=function(){this.op.inner=s,this.op.less()},t}(),P=function(){function t(t){this.type="flatten",this.ins=t,this.out=s,this.open=!0,this.inner=s,this.il=c}return t.prototype._start=function(t){this.out=t,this.open=!0,this.inner=s,this.il=c,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.inner!==s&&this.inner._remove(this.il),this.out=s,this.open=!0,this.inner=s,this.il=c},t.prototype.less=function(){var t=this.out;t!==s&&(this.open||this.inner!==s||t._c())},t.prototype._n=function(t){var i=this.out;if(i!==s){var n=this.inner,o=this.il;n!==s&&o!==c&&n._remove(o),(this.inner=t)._add(this.il=new I(i,this))}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){this.open=!1,this.less()},t}(),S=function(){function t(t,i,n){var o=this;this.type="fold",this.ins=n,this.out=s,this.f=function(i){return t(o.acc,i)},this.acc=this.seed=i}return t.prototype._start=function(t){this.out=t,this.acc=this.seed,t._n(this.acc),this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s,this.acc=this.seed},t.prototype._n=function(t){var i=this.out;if(i!==s){var n=p(this,t,i);n!==s&&i._n(this.acc=n)}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),j=function(){function t(t){this.type="last",this.ins=t,this.out=s,this.has=!1,this.val=s}return t.prototype._start=function(t){this.out=t,this.has=!1,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s,this.val=s},t.prototype._n=function(t){this.has=!0,this.val=t},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&(this.has?(t._n(this.val),t._c()):t._e(new Error("last() failed because input stream completed")))},t}(),D=function(){function t(t,i){this.type="map",this.ins=i,this.out=s,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s},t.prototype._n=function(t){var i=this.out;if(i!==s){var n=p(this,t,i);n!==s&&i._n(n)}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),k=function(){function t(t){this.type="remember",this.ins=t,this.out=s}return t.prototype._start=function(t){this.out=t,this.ins._add(t)},t.prototype._stop=function(){this.ins._remove(this.out),this.out=s},t}(),T=function(){function t(t,i){this.type="replaceError",this.ins=i,this.out=s,this.f=t}return t.prototype._start=function(t){this.out=t,this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s},t.prototype._n=function(t){var i=this.out;i!==s&&i._n(t)},t.prototype._e=function(t){var i=this.out;if(i!==s)try{this.ins._remove(this),(this.ins=this.f(t))._add(this)}catch(t){i._e(t)}},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),E=function(){function t(t,i){this.type="startWith",this.ins=t,this.out=s,this.val=i}return t.prototype._start=function(t){this.out=t,this.out._n(this.val),this.ins._add(t)},t.prototype._stop=function(){this.ins._remove(this.out),this.out=s},t}(),M=function(){function t(t,i){this.type="take",this.ins=i,this.out=s,this.max=t,this.taken=0}return t.prototype._start=function(t){this.out=t,this.taken=0,this.max<=0?t._c():this.ins._add(this)},t.prototype._stop=function(){this.ins._remove(this),this.out=s},t.prototype._n=function(t){var i=this.out;if(i!==s){var n=++this.taken;n<this.max?i._n(t):n===this.max&&(i._n(t),i._c())}},t.prototype._e=function(t){var i=this.out;i!==s&&i._e(t)},t.prototype._c=function(){var t=this.out;t!==s&&t._c()},t}(),W=function(){function t(t){this._prod=t||s,this._ils=[],this._stopID=s,this._dl=s,this._d=!1,this._target=s,this._err=s}return t.prototype._n=function(t){var i=this._ils,n=i.length;if(this._d&&this._dl._n(t),1==n)i[0]._n(t);else{if(0==n)return;for(var o=h(i),e=0;e<n;e++)o[e]._n(t)}},t.prototype._e=function(t){if(this._err===s){this._err=t;var i=this._ils,n=i.length;if(this._x(),this._d&&this._dl._e(t),1==n)i[0]._e(t);else{if(0==n)return;for(var o=h(i),e=0;e<n;e++)o[e]._e(t)}if(!this._d&&0==n)throw this._err}},t.prototype._c=function(){var t=this._ils,i=t.length;if(this._x(),this._d&&this._dl._c(),1==i)t[0]._c();else{if(0==i)return;for(var n=h(t),o=0;o<i;o++)n[o]._c()}},t.prototype._x=function(){0!==this._ils.length&&(this._prod!==s&&this._prod._stop(),this._err=s,this._ils=[])},t.prototype._stopNow=function(){this._prod._stop(),this._err=s,this._stopID=s},t.prototype._add=function(t){var i=this._target;if(i!==s)return i._add(t);var n=this._ils;if(n.push(t),!(n.length>1))if(this._stopID!==s)clearTimeout(this._stopID),this._stopID=s;else{var o=this._prod;o!==s&&o._start(this)}},t.prototype._remove=function(t){var i=this,n=this._target;if(n!==s)return n._remove(t);var o=this._ils,e=o.indexOf(t);e>-1&&(o.splice(e,1),this._prod!==s&&o.length<=0?(this._err=s,this._stopID=setTimeout((function(){return i._stopNow()}))):1===o.length&&this._pruneCycles())},t.prototype._pruneCycles=function(){this._hasNoSinks(this,[])&&this._remove(this._ils[0])},t.prototype._hasNoSinks=function(t,i){if(-1!==i.indexOf(t))return!0;if(t.out===this)return!0;if(t.out&&t.out!==s)return this._hasNoSinks(t.out,i.concat(t));if(t._ils){for(var n=0,o=t._ils.length;n<o;n++)if(!this._hasNoSinks(t._ils[n],i.concat(t)))return!1;return!0}return!1},t.prototype.ctor=function(){return this instanceof L?L:t},t.prototype.addListener=function(t){t._n=t.next||u,t._e=t.error||u,t._c=t.complete||u,this._add(t)},t.prototype.removeListener=function(t){this._remove(t)},t.prototype.subscribe=function(t){return this.addListener(t),new _(this,t)},t.prototype[r.default]=function(){return this},t.create=function(i){if(i){if("function"!=typeof i.start||"function"!=typeof i.stop)throw new Error("producer requires both start and stop functions");f(i)}return new t(i)},t.createWithMemory=function(t){return t&&f(t),new L(t)},t.never=function(){return new t({_start:u,_stop:u})},t.empty=function(){return new t({_start:function(t){t._c()},_stop:u})},t.throw=function(i){return new t({_start:function(t){t._e(i)},_stop:u})},t.from=function(i){if("function"==typeof i[r.default])return t.fromObservable(i);if("function"==typeof i.then)return t.fromPromise(i);if(Array.isArray(i))return t.fromArray(i);throw new TypeError("Type of input to from() must be an Array, Promise, or Observable")},t.of=function(){for(var i=[],n=0;n<arguments.length;n++)i[n]=arguments[n];return t.fromArray(i)},t.fromArray=function(i){return new t(new m(i))},t.fromPromise=function(i){return new t(new w(i))},t.fromObservable=function(i){if(i.endWhen)return i;var n="function"==typeof i[r.default]?i[r.default]():i;return new t(new y(n))},t.periodic=function(i){return new t(new b(i))},t.prototype._map=function(t){return new(this.ctor())(new D(t,this))},t.prototype.map=function(t){return this._map(t)},t.prototype.mapTo=function(t){var i=this.map((function(){return t}));return i._prod.type="mapTo",i},t.prototype.filter=function(i){var n,o,e=this._prod;return new t(e instanceof A?new A((n=e.f,o=i,function(t){return n(t)&&o(t)}),e.ins):new A(i,this))},t.prototype.take=function(t){return new(this.ctor())(new M(t,this))},t.prototype.drop=function(i){return new t(new x(i,this))},t.prototype.last=function(){return new t(new j(this))},t.prototype.startWith=function(t){return new L(new E(this,t))},t.prototype.endWhen=function(t){return new(this.ctor())(new N(t,this))},t.prototype.fold=function(t,i){return new L(new S(t,i,this))},t.prototype.replaceError=function(t){return new(this.ctor())(new T(t,this))},t.prototype.flatten=function(){return new t(new P(this))},t.prototype.compose=function(t){return t(this)},t.prototype.remember=function(){return new L(new k(this))},t.prototype.debug=function(t){return new(this.ctor())(new g(this,t))},t.prototype.imitate=function(t){if(t instanceof L)throw new Error("A MemoryStream was given to imitate(), but it only supports a Stream. Read more about this restriction here: https://github.com/staltz/xstream#faq");this._target=t;for(var i=this._ils,n=i.length,o=0;o<n;o++)t._add(i[o]);this._ils=[]},t.prototype.shamefullySendNext=function(t){this._n(t)},t.prototype.shamefullySendError=function(t){this._e(t)},t.prototype.shamefullySendComplete=function(){this._c()},t.prototype.setDebugListener=function(t){t?(this._d=!0,t._n=t.next||u,t._e=t.error||u,t._c=t.complete||u,this._dl=t):(this._d=!1,this._dl=s)},t.merge=function(){for(var i=[],n=0;n<arguments.length;n++)i[n]=arguments[n];return new t(new l(i))},t.combine=function(){for(var i=[],n=0;n<arguments.length;n++)i[n]=arguments[n];return new t(new d(i))},t}();i.Stream=W;var L=function(t){function i(i){var n=t.call(this,i)||this;return n._has=!1,n}return e(i,t),i.prototype._n=function(i){this._v=i,this._has=!0,t.prototype._n.call(this,i)},i.prototype._add=function(t){var i=this._target;if(i!==s)return i._add(t);var n=this._ils;if(n.push(t),n.length>1)this._has&&t._n(this._v);else if(this._stopID!==s)this._has&&t._n(this._v),clearTimeout(this._stopID),this._stopID=s;else if(this._has)t._n(this._v);else{var o=this._prod;o!==s&&o._start(this)}},i.prototype._stopNow=function(){this._has=!1,t.prototype._stopNow.call(this)},i.prototype._x=function(){this._has=!1,t.prototype._x.call(this)},i.prototype.map=function(t){return this._map(t)},i.prototype.mapTo=function(i){return t.prototype.mapTo.call(this,i)},i.prototype.take=function(i){return t.prototype.take.call(this,i)},i.prototype.endWhen=function(i){return t.prototype.endWhen.call(this,i)},i.prototype.replaceError=function(i){return t.prototype.replaceError.call(this,i)},i.prototype.remember=function(){return this},i.prototype.debug=function(i){return t.prototype.debug.call(this,i)},i}(W);i.MemoryStream=L;var C=W;i.default=C},function(t,i,n){"use strict";function o(t){var i,n=t.Symbol;return"function"==typeof n?n.observable?i=n.observable:(i=n("observable"),n.observable=i):i="@@observable",i}n.d(i,"a",(function(){return o}))},function(t,i,n){"use strict";n.r(i);var o=n(0),e=n.n(o).a.periodic;console.log(e)},function(t,i,n){"use strict";n.r(i),function(t,o){var e,r=n(1);e="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:o;var s=Object(r.a)(e);i.default=s}.call(this,n(4),n(5)(t))},function(t,i){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,i){t.exports=function(t){if(!t.webpackPolyfill){var i=Object.create(t);i.children||(i.children=[]),Object.defineProperty(i,"loaded",{enumerable:!0,get:function(){return i.l}}),Object.defineProperty(i,"id",{enumerable:!0,get:function(){return i.i}}),Object.defineProperty(i,"exports",{enumerable:!0}),i.webpackPolyfill=1}return i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,